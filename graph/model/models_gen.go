// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Brand struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Product struct {
	ID             string   `json:"id"`
	Name           string   `json:"name"`
	Imageurl       string   `json:"imageurl"`
	Price          int      `json:"price"`
	Maker          *string  `json:"maker"`
	Brand          *Brand   `json:"brand"`
	Mallname       string   `json:"mallname"`
	Mallproducturl string   `json:"mallproducturl"`
	Deliveryfee    int      `json:"deliveryfee"`
	Category       Category `json:"category"`
}

type ProductsInput struct {
	Offset   int      `json:"offset"`
	Limit    int      `json:"limit"`
	Category Category `json:"category"`
	Brand    *string  `json:"brand"`
}

type Category string

const (
	CategoryAll      Category = "ALL"
	CategoryKorean   Category = "KOREAN"
	CategoryChinese  Category = "CHINESE"
	CategoryJapanese Category = "JAPANESE"
	CategoryAsian    Category = "ASIAN"
	CategoryItalian  Category = "ITALIAN"
	CategorySteak    Category = "STEAK"
)

var AllCategory = []Category{
	CategoryAll,
	CategoryKorean,
	CategoryChinese,
	CategoryJapanese,
	CategoryAsian,
	CategoryItalian,
	CategorySteak,
}

func (e Category) IsValid() bool {
	switch e {
	case CategoryAll, CategoryKorean, CategoryChinese, CategoryJapanese, CategoryAsian, CategoryItalian, CategorySteak:
		return true
	}
	return false
}

func (e Category) String() string {
	return string(e)
}

func (e *Category) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Category(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}

func (e Category) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
